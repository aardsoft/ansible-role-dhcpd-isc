#jinja2: lstrip_blocks: True
# {{ ansible_managed }}
#
# DHCP Server Configuration file.
#   see dhcpd.conf(5) man page
#
{% if site.name is defined %}
# Configuration generated for {{site.name}}
#   {{site.description|default('')}}
{% endif %}

{{dhcp_authoritative_flag|default('authoritative')}};

{% if dns_domain is undefined and dhcp_default_domain is defined %}
{% set dns_domain = dhcp_default_domain %}
{% endif %}

{% if dns_domain is undefined and dns_default_domain is defined %}
{% set dns_domain = dns_default_domain %}
{% endif %}

# additional info on clients connecting via relay
if exists agent.circuit-id {
    log ( error, concat( "Lease for ", binary-to-ascii (10, 8, ".", leased-address), " is connected to ", option agent.circuit-id));
}

if known {
    log (info, concat ("HOSTNAME: ", host-decl-name, " on ",binary-to-ascii (10, 8, ".", leased-address)," at ", binary-to-ascii (16, 8, ":", substring (hardware, 1, 6))));
}

# DHCP classes are global, so only basic settings are possible here.
# Until it's clear how matching in shared network sections is possible
# only one global PXE/HTTP filename is supported, and PXE and HTTP flags
# must not override each other. (pool is theoretically capable of doing the
# matching, but not really an option as it requires range specifications)
{% if dhcp_pxe_filename is defined or netboot.pxe_filename is defined %}
class "pxeclients" {
    match if substring (option vendor-class-identifier, 0, 9) = "PXEClient";
    filename "{{netboot.pxe_filename|default(dhcp_pxe_filename)}}";
}
{% endif %}

{% if dhcp_http_filename is defined or netboot.http_filename is defined %}
class "httpclients" {
    match if substring (option vendor-class-identifier, 0, 10) = "HTTPClient";
    filename "{{netboot.http_filename|default(dhcp_http_filename)}}";
    option vendor-class-identifier "HTTPClient";
}
{% endif %}

{# Create an option space, and create options prefixed with the option #}
{# space name (vendor name). A configuration block may look like this: #}
{#                                                                     #}
{# dhcp_optionspaces:                                                  #}
{#   SUNW:                                                             #}
{#     options:                                                        #}
{#       - "root-mount-options code 1 = text"                          #}
{#       - "root-server-ip-address code 2 = ip-address"                #}
{#                                                                     #}
{% if dhcp_optionspaces is defined %}
  {% for optionspace in dhcp_optionspaces %}
option space {{ optionspace }};
  {% for option in dhcp_optionspaces[optionspace].options %}
option {{optionspace}}.{{option}};
  {% endfor %}
  {% endfor %}
{% endif %}

{# loop over global options from `dhcp_options`. Those are not magically #}
{# prefixed with 'options' to allow arbitrary configuration directives.  #}
{% if dhcp_options is defined %}
 {% for option in dhcp_options %}
{{option}};
 {% endfor %}
{% endif %}

{# also todo: add dynamic ranges #}

{% for vlan in vlans %}
{# vlan_data is used to store network address and mask of each subnet, to be #}
{# cleared in each loop. This way we can make sure configuration shows up in #}
{# the correct VLan _and_ the correct subnet. This finally filters some IP   #}
{# addresses on public interfaces we don't really want, and as bonus adds    #}
{# proper support for multiple subnets in a VLan                             #}
{% set vlan_data = {} %}
{% if dhcp_networks[vlan] is defined %}
 {% if dhcp_networks[vlan].relay is defined and
       dhcp_networks[vlan].relay == true %}
class "VLAN{{vlans[vlan]}}" {
  match if binary-to-ascii(10,16,"",substring(option agent.circuit-id,2,2)) = "{{vlans[vlan]}}";
}
 {% endif %}
 {# dhcpd doesn't like empty shared network definitions - so even though the #}
 {# subnet filtering happens later on we still need to check if there's at   #}
 {# least one subnet in the shared network                                   #}
 {% set net_data = {} %}
 {% if net_data.update({'subnet_count': 0 }) %}{% endif %}
 {% for subnet in dhcp_networks[vlan].subnets %}
    {% if site.name is defined and dhcp_networks[vlan].subnets[subnet].sites is defined %}
      {% if site.name in dhcp_networks[vlan].subnets[subnet].sites %}
        {# setting this directly to int throws very weird errors #}
        {% if net_data.update({'subnet_count': (net_data.subnet_count|int + 1)|string}) %}{% endif %}
      {% endif %}
    {% else %}
      {% if net_data.update({'subnet_count': (net_data.subnet_count|int + 1)|string}) %}{% endif %}
    {% endif %}
 {% endfor %}

 {% if net_data.subnet_count|int > 0 %}
# vlan {{vlan}} has {{net_data.subnet_count}} matching subnet(s)
 {% include "dhcp-shared-network.j2" %}
 {% else %}
# skipping vlan {{vlan}}, no matching subnets
 {% endif %}
{% else %}
# skipping undefined vlan {{vlan}}
{% endif %}
{% endfor %}
